#include <rclcpp/rclcpp.hpp>
#include <geometry_msgs/msg/pose.hpp>
#include <vector>
#include <std_msgs/msg/string.hpp>
#include <cmath>
#include <algorithm>

class PurePursuit : public rclcpp::Node {
public:
    PurePursuit() : Node("pure_pursuit_node") {

        this->declare_parameter("x", std::vector<double>{});
        this->declare_parameter("y", std::vector<double>{});

        // Read 'x' and 'y' parameter as a vector
        this->get_parameter("x", x_waypoints_);
        this->get_parameter("y", y_waypoints_);

        if (!x_waypoints_.empty()) {
            RCLCPP_INFO(this->get_logger(), "First waypoint of x: %f", x_waypoints_[0]);
        } else {
            RCLCPP_WARN(this->get_logger(), "x_waypoints_ is empty!");
        }

        if (!y_waypoints_.empty()) {
            RCLCPP_INFO(this->get_logger(), "First waypoint of y: %f", y_waypoints_[0]);
        } else {
            RCLCPP_WARN(this->get_logger(), "y_waypoints_ is empty!");
        }

        waypoint_publisher_ = this->create_publisher<geometry_msgs::msg::PoseStamped>("nearest_waypoint", 10);

        // publisher
        publisher_ = this->create_publisher<std_msgs::msg::String>("hi_topic", 10);
        // Subscription
        subscription_ = this->create_subscription<geometry_msgs::msg::Pose>("/racecar/odom_racecar", 10, std::bind(&PurePursuit::odom_callback, this, std::placeholders::_1));
        // Timer
        timer_ = this->create_wall_timer(std::chrono::milliseconds(200), std::bind(&PurePursuit::pub_callback, this));

        RCLCPP_INFO(this->get_logger(), "pure_pursuit_node initialized");
        
    }
private:


    void odom_callback(const geometry_msgs::msg::Pose::SharedPtr msg) {
        // Store or utilize the received pose data
        current_x = msg->position.x;
        current_y = msg->position.y;

        int nearest_point_index = find_nearest_point(current_x, current_y);
        if (nearest_point_index != -1) {
            RCLCPP_INFO(this->get_logger(), "Nearest waypoint index: %d", nearest_point_index);
        }

        RCLCPP_INFO(this->get_logger(), "Received Pose - x: %f, y: %f", current_x, current_y);
    }

    int find_nearest_point(double curr_x, double curr_y) {
        std::vector<double> ranges;

        for (size_t index = 0; index < x_waypoints_.size(); ++index) {
            double eucl_x = std::pow(curr_x - x_waypoints_[index], 2);
            double eucl_y = std::pow(curr_y - y_waypoints_[index], 2);
            double eucl_d = std::sqrt(eucl_x + eucl_y);
            ranges.push_back(eucl_d);
        }

        return std::distance(ranges.begin(), std::min_element(ranges.begin(), ranges.end()));
    }

    void pub_callback() {
        std_msgs::msg::String msg;
        msg.data = "hi";
        // RCLCPP_INFO(this->get_logger(), "Publishing: '%s'", msg.data.c_str());

        publisher_->publish(msg);
    }


    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher_;
    rclcpp::Subscription<geometry_msgs::msg::Pose>::SharedPtr subscription_;
    rclcpp::TimerBase::SharedPtr timer_;
    std::vector<double> x_waypoints_;
    std::vector<double> y_waypoints_;
    double current_pose_x_;
    double current_pose_y_;

};

int main(int argc, char** argv) {
    rclcpp::init(argc, argv);
    auto node = std::make_shared<PurePursuit>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}



